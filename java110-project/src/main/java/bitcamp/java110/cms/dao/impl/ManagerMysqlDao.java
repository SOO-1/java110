package bitcamp.java110.cms.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import bitcamp.java110.cms.annotation.Component;
import bitcamp.java110.cms.dao.DaoException;
import bitcamp.java110.cms.dao.ManagerDao;
import bitcamp.java110.cms.domain.Manager;

// 자동생성하게
@Component
public class ManagerMysqlDao implements ManagerDao {

    public int insert(Manager manager) {
        
        Connection con = null;
        Statement stmt = null;
        
        try {
            // 매니저 정보를 입력할 때 p1_memb 테이블과 p1_mgt 테이블에 
            // 매니저 정보를 분산 입력 해야 한다.
            // 두 테이블에 모두 입력 성공할 때 입력을 완료하도록 
            // 두 insert를 한 작업(transaction)으로 묶는다.
            // => SQL을 서버에 보낸 후 클라이언트가 최종 완료 신호를
            //    보내기 전까지는 처리를 보류하도록 설정한다.
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studydb"
                    , "study", "1111");
            con.setAutoCommit(false);

            stmt = con.createStatement();
            
            String sql = "insert into p1_memb(name, email, pwd, tel, cdt)"
                    + "values('" + manager.getName()
                    + "','" + manager.getEmail()
                    + "',password('" + manager.getPassword()
                    + "'),'" + manager.getTel()
                    + "',now())";    //now()와 password()는 mariadb함수

            System.out.println(sql);
            
            // p1_memb 테이블에 회원 기본 정보를 입력 한 후
            // 자동으로 생성된 회원 번호를 리턴 받는다.
            stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);   //자동으로 숫자올리기?
            
            //insert를 실행한 후 리턴받은 자동증가 PK값을 꺼내기
            ResultSet autogeneratedKeys = stmt.getGeneratedKeys(); 
            autogeneratedKeys.next();
            int memberNo = autogeneratedKeys.getInt(1); //resultset은 arraylist등과 다르게 1부터시작.
            autogeneratedKeys.close(); //번호를 가져왔으니 닫아도 됨
            
            // 회원 번호로 매니저 테이블에 직위 정보를 입력한다.
            String sql2 = "insert into p1_mgr(mrno, posi)"
                    + " values(" +memberNo
                    + ",'" + manager.getPosition()
                    + "')";
            stmt.executeUpdate(sql2);
            
            // 두 insert가 모두 성공했을 때만 서버에 완료 신호를 보낸다.
            con.commit();
            return 1;
        }catch (Exception e) {
            throw new DaoException(e);
        }finally {
            try{ stmt.close(); } catch(Exception e) {}
            try{ con.close(); } catch(Exception e) {}
        }
        //실패했을 경우에는 여기까지 닿지 않기 때문에 return 0 할 필요 X
    }

    public List<Manager> findAll(){ //밑에서 catch가 던지는것이 runtime exception이기 때문에 메서드 옆에 붙이지 않아도 됨.

        ArrayList<Manager> list = new ArrayList<>();
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;    //결과를 가져오기 위해서.
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");

            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studydb"
                    , "study", "1111");

            stmt = con.createStatement();

            rs = stmt.executeQuery(
                    "  select " + 
                            "  m.mno," +
                            "  m.name," + 
                            "  m.email," + 
                            "  mr.posi" + 
                            "  from p1_mgr mr inner join p1_memb m" + 
                            "  on mr.mrno = m.mno");    //sql안에 ;넣지 않음.
            while(rs.next()) {
                Manager mgr = new Manager();    //바깥으로 뽑으면 arraylist에 기존데이터가 날아가고 모든 것이 같은 주소를 가리키게 됨.
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setPosition(rs.getString("posi"));

                list.add(mgr);
            }
        }catch (Exception e) {
            throw new DaoException(e);
        }finally {
            try{ rs.close(); } catch(Exception e) {}
            try{ stmt.close(); } catch(Exception e) {}
            try{ con.close(); } catch(Exception e) {}
        }
        return list;
    }

    Connection con;
    {
        try {
            Class.forName("org.mariadb.jdbc.Driver");

            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studydb"
                    , "study", "1111");

        }catch(Exception e) {
            e.printStackTrace();
        }
    }
    //인스턴스블럭 - 생성자가 호출되기 전에 호출된다.

    public List<Manager> findAll2(){ 

        ArrayList<Manager> list = new ArrayList<>();
        Statement stmt = null;
        ResultSet rs = null;    
        
        try {

            stmt = con.createStatement();

            rs = stmt.executeQuery(
                    "  select " + 
                            "  m.mno," +
                            "  m.name," + 
                            "  m.email," + 
                            "  mr.posi" + 
                            "  from p1_mgr mr inner join p1_memb m" + 
                            "  on mr.mrno = m.mno");    
            while(rs.next()) {
                Manager mgr = new Manager();   
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setPosition(rs.getString("posi"));

                list.add(mgr);
            }
        }catch (Exception e) {
            throw new DaoException(e);
        }finally {
            try{ rs.close(); } catch(Exception e) {}
            try{ stmt.close(); } catch(Exception e) {}
        }
        return list;
    }
    
    public Manager findByEmail(String email) {
        
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;    //결과를 가져오기 위해서.
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studydb"
                    , "study", "1111");

            stmt = con.createStatement();
            rs = stmt.executeQuery(
                    "  select " + 
                            "  m.mno," +
                            "  m.name," + 
                            "  m.email," +
                            "  m.tel," + 
                            "  mr.posi" + 
                            "  from p1_mgr mr inner join p1_memb m" + 
                            "  on mr.mrno = m.mno" +
                            "  where m.email = '" + email +"'");    //sql안에 ;넣지 않음.

            if(rs.next()) {
                Manager mgr = new Manager();    //바깥으로 뽑으면 arraylist에 기존데이터가 날아가고 모든 것이 같은 주소를 가리키게 됨.
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setTel(rs.getString("tel"));
                mgr.setPosition(rs.getString("posi"));

                return mgr;
            }
            
            return null;
            
        }catch (Exception e) {
            throw new DaoException(e);
        }finally {
            try{ rs.close(); } catch(Exception e) {}
            try{ stmt.close(); } catch(Exception e) {}
            //끝났지만 인스턴스블록의 con을 닫지 않음.
        }

    }
   
    public Manager findByNo(int no) {
        
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;   
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studydb"
                    , "study", "1111");

            stmt = con.createStatement();
            rs = stmt.executeQuery(
                    "  select " + 
                            "  m.mno," +
                            "  m.name," + 
                            "  m.email," +
                            "  m.tel," + 
                            "  mr.posi" + 
                            "  from p1_mgr mr inner join p1_memb m" + 
                            "  on mr.mrno = m.mno" +
                            "  where m.mno = " + no);    //sql안에 ;넣지 않음.

            if(rs.next()) {
                Manager mgr = new Manager();    //바깥으로 뽑으면 arraylist에 기존데이터가 날아가고 모든 것이 같은 주소를 가리키게 됨.
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setTel(rs.getString("tel"));
                mgr.setPosition(rs.getString("posi"));

                return mgr;
            }
            
            return null;
            
        }catch (Exception e) {
            throw new DaoException(e);
        }finally {
            try{ rs.close(); } catch(Exception e) {}
            try{ stmt.close(); } catch(Exception e) {}
            try{ con.close(); } catch(Exception e) {}
        }

    }
    
    
    public int delete(int no) {
        
        Connection con = null;
        Statement stmt = null;
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studydb"
                    , "study", "1111");
            
            con.setAutoCommit(false);
            stmt = con.createStatement();
            

            String sql = "delete from p1_mgr where mrno = " + no; //자식먼저삭제
            int count = stmt.executeUpdate(sql);
            
            if(count ==0)
                return 0;
            
            String sql2 = "delete from p1_memb where mno = " + no; //부모삭제
            stmt.executeUpdate(sql2);
            con.commit();
            
            return 1;
            
        }catch (Exception e) {
            throw new DaoException(e);
        }finally {
            try{ stmt.close(); } catch(Exception e) {}
            try{ con.close(); } catch(Exception e) {}
        }

    }
    
    
    public static void main(String[] args) {
        ManagerMysqlDao dao = new ManagerMysqlDao();
        long start, end;
        start = System.currentTimeMillis();    //1970년기준
        for(int i=0; i<100; i++) {
            dao.findAll();  //연결 - select - select 끊기
        }
        end = System.currentTimeMillis();
        System.out.println(end-start);

        start = System.currentTimeMillis();    //1970년기준
        for(int i=0; i<100; i++) {
            dao.findAll2(); //한번커넥션             => 매번 커넥션하는것보다 훨씬 빠름.
        }
        end = System.currentTimeMillis();
        System.out.println(end-start);
    
    }
    
    
    
}
